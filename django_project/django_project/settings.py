import os
# Celery settings

CELERY_BROKER_URL = 'amqp://guest:guest@localhost'

#: Only add pickle to this list if your broker is secured
#: from unwanted access (see userguide/security.html)
CELERY_ACCEPT_CONTENT = ['json']
CELERY_RESULT_BACKEND = 'db+sqlite:///results.sqlite'
CELERY_TASK_SERIALIZER = 'json'
"""
Django settings for django_project project.

Generated by 'django-admin startproject' using Django 3.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os.path
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Django will refuse to start if SECRET_KEY is not set.
# django-admin startproject automatically adds a randomly-generated SECRET_KEY to each new project.
# This is used to provide cryptographic signing, and should be set to a unique, unpredictable value.
SECRET_KEY = 'django-insecure-h=)12i%&(&kyelf2t^+fp6+c^u5&&ej7llz6tlk8q9@5ma-^e^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True  # When DEBUG is True and ALLOWED_HOSTS is empty, the host is validated against
# ['.localhost', '127.0.0.1', '[::1]']
# DEBUG¶
# Default: False
# A boolean that turns on/off debug mode.
# Never deploy a site into production with DEBUG turned on.
# One of the main features of debug mode is the display of detailed error pages.
# If your app raises an exception when DEBUG is True, Django will display a detailed traceback,
# including a lot of metadata about your environment, such as all the currently defined
# Django settings (from settings.py)..

ALLOWED_HOSTS = [] # This is a security measure to prevent HTTP Host header attacks,
# which are possible even under many seemingly-safe web server configurations.
# Values in this list can be fully qualified names (e.g. 'www.example.com'), or IP Address

# Changed in Django 3.1: - If ALLOWED_HOSTS is empty and DEBUG=True, subdomains of localhost were allowed.

APPEND_SLASH = True  # The APPEND_SLASH setting is only used if CommonMiddleware is installed
# Application definition
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.PyMemcacheCache',
        'LOCATION': '/var/tmp/django_cache',
        'TIMEOUT': 600 # default 300 sec
    }
}
# Changed in Django 3.2:
# The PyMemcacheCache backend was added.

CACHE_MIDDLEWARE_KEY_PREFIX = "ROMIL_CACHE"
# Default: '' (Empty string)
# A string which will be prefixed to the cache keys generated by the cache middleware.
# This prefix is combined with the KEY_PREFIX setting; it does not replace it.

CACHE_MIDDLEWARE_SECONDS = 300
# Default: 600
# The default number of seconds to cache a page for the cache middleware.

CSRF_COOKIE_AGE = 3600
# Default: 31449600 (approximately 1 year, in seconds)
# The age of CSRF cookies, in seconds.
# The reason for setting a long-lived expiration time is to avoid problems in the
# case of a user closing a browser or bookmarking a page and then loading that page from a browser cache.
# Without persistent cookies, the form submission would fail in this case.

CSRF_COOKIE_NAME = "romilcsrf"
# Default: 'csrftoken'
# The name of the cookie to use for the CSRF authentication token.
# This can be whatever you want (as long as it’s different from the other cookie names in your application).
# See Cross Site Request Forgery protection.
# A list of strings designating all applications that are enabled in this Django installation
INSTALLED_APPS = [
    'polls.apps.PollsConfig',
    'test_polls.apps.TestPollsConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'django_project.urls'


# Here’s a setup that tells the Django template engine to load templates from the templates subdirectory inside each installed application:
#
# TEMPLATES = [
#     {
#         'BACKEND': 'django.template.backends.django.DjangoTemplates',
#         'APP_DIRS': True,
#     },
# ]
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates")], # DIRS Default: [] (Empty list) Directories where the engine should look for template source files, in search order.
        'APP_DIRS': True, # APP_DIRS Default: False Whether the engine should look for template source files inside installed applications.
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# The full Python path of the WSGI application object that Django’s built-in servers (e.g. runserver) will use.
# The django-admin startproject management command will create a standard wsgi.py
# file with an application callable in it, and point this setting to that application.
WSGI_APPLICATION = 'django_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
# Synchronizing your databases:
# The migrate management command operates on one database at a time. By default,
# it operates on the default database, but by providing the --database option,
# you can tell it to synchronize a different database.
# So, to synchronize all models onto all databases in the first example above, you would need to call:
#
# $ ./manage.py migrate
# $ ./manage.py migrate --database=users
# If you don’t want every application to be synchronized onto a particular database,
# you can define a database router that implements a policy constraining the availability of particular models.
DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # },

    # if  'default': {}, you must set up DATABASE_ROUTERS for all of your apps’ models,
    # including those in any contrib and third-party apps you’re using,
    # so that no queries are routed to the default database

    # This will run on the 'users' database. Question.objects.using('users').all()
    'default': {
        'NAME': 'app_data',
        'ENGINE': 'django.db.backends.mysql',
        'USER': 'root',
        'PASSWORD': 'root'
    },
    'users': {
        'NAME': 'user_data',
        'ENGINE': 'django.db.backends.mysql',
        'USER': 'root',
        'PASSWORD': 'root'
    }
}
# Using raw cursors with multiple databases¶
# If you are using more than one database you can use django.db.connections to obtain the connection
# (and cursor) for a specific database. django.db.connections is a dictionary-like object
# that allows you to retrieve a specific connection using its alias:
# from django.db import connections
# with connections['my_db_alias'].cursor() as cursor:

# DATABASE_ROUTERS = ['path.to.usersRouter', 'path.to.PrimaryReplicaRouter'] ,
# The order in which routers are processed is significant.
# Routers will be queried in the order they are listed in the DATABASE_ROUTERS setting.
# In this example, the usersRouter is processed before the PrimaryReplicaRouter,
# usersRouter, PrimaryReplicaRouter are two classes
# class PrimaryReplicaRouter:
#     def db_for_read(self, model, **hints):
#         """
#         Reads go to a randomly-chosen replica.
#         """
#         return random.choice(['replica1', 'replica2'])
#
#     def db_for_write(self, model, **hints):
#         """
#         Writes always go to primary.
#         """
#         return 'primary'

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

# STATIC_URL¶
# Default: None
#
# URL to use when referring to static files located in STATIC_ROOT.
#
# Example: "/static/" or "http://static.example.com/"
STATIC_URL = '/static/'

# Settings for django.contrib.staticfiles.
#
# STATIC_ROOT¶
# Default: None
#
# The absolute path to the directory where collectstatic will collect static files for deployment.
#
# Example: "/var/www/example.com/static/"
#
# If the staticfiles contrib app is enabled (as in the default project template), the collectstatic management command will collect static files into this directory.


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# DEFAULT_AUTO_FIELD =
# New in Django 3.2.
# Default: 'django.db.models.AutoField'
# Default primary key field type to use for models that don’t have a field with primary_key=True.

# MEDIA_ROOT
# Default: '' (Empty string)
# Absolute filesystem path to the directory that will hold user-uploaded files.
# Example: "/var/www/example.com/media/"

# MEDIA_URL
# Default: '' (Empty string)
# URL that handles the media served from MEDIA_ROOT, used for managing stored files.
# It must end in a slash if set to a non-empty value.
# You will need to configure these files to be served in both development and production environments.
# If you want to use {{ MEDIA_URL }} in your templates, add 'django.template.context_processors.media'
# in the 'context_processors' option of TEMPLATES.
# Example: "http://media.example.com/" If MEDIA_URL is a relative path

LOGIN_URL = "/login/"
LOGIN_REDIRECT_URL = "/polls/"
LOGOUT_REDIRECT_URL = '/login/'
